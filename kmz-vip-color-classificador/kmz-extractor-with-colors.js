/**
 * KMZ Extractor Tool with Color Classification
 *
 * Este script processa arquivos KMZ (Google Earth/Maps) e classifica por cores:
 *
 * 1. Extrai o conte√∫do do arquivo KMZ
 * 2. Analisa o arquivo KML para extrair informa√ß√µes de placemarks
 * 3. Classifica placemarks baseado nas cores:
 *    - Verde-Padr√£o (ff00b371): pode salvar - vai para "Codigos-salvos-regularizado.txt"
 *    - Laranja-escuro (ff3643f4): tem que regularizar - vai para "pedente-pra-regularizar.txt"
 *    - Rosa-escuro (ff631ee9): tem que regularizar - vai para "pedente-pra-regularizar.txt"
 * 4. Renomeia imagens baseado nos dados de placemarks
 * 5. Verifica e converte todas as imagens para o formato JPG
 *
 * Uso: node kmz-extractor-with-colors.js [caminho-para-arquivo.kmz]
 */

const fs = require("fs").promises
const path = require("path")
const { existsSync } = require("fs")
const fsExtra = require("fs-extra")
const AdmZip = require("adm-zip")
const { DOMParser } = require("@xmldom/xmldom")
const sharp = require("sharp")

// Fun√ß√£o para verificar espa√ßo em disco dispon√≠vel
async function checkDiskSpace(directory) {
  try {
    const stats = (await fs.statfs) ? fs.statfs(directory) : null
    if (stats) {
      const freeSpace = stats.bavail * stats.bsize
      const freeSpaceGB = (freeSpace / (1024 * 1024 * 1024)).toFixed(2)
      console.log(`üíæ Espa√ßo livre no disco: ${freeSpaceGB} GB`)
      return freeSpace
    }
  } catch (error) {
    console.log(`‚ö†Ô∏è  N√£o foi poss√≠vel verificar espa√ßo em disco: ${error.message}`)
  }
  return null
}

// Fun√ß√£o para obter tamanho do arquivo
async function getFileSize(filePath) {
  try {
    const stats = await fs.stat(filePath)
    const sizeGB = (stats.size / (1024 * 1024 * 1024)).toFixed(2)
    console.log(`üìÅ Tamanho do arquivo KMZ: ${sizeGB} GB`)
    return stats.size
  } catch (error) {
    console.error(`Erro ao obter tamanho do arquivo: ${error.message}`)
    return 0
  }
}

// Fun√ß√£o para limpar diret√≥rio tempor√°rio
async function cleanTempDirectory(tempDir) {
  try {
    if (existsSync(tempDir)) {
      console.log(`üßπ Limpando diret√≥rio tempor√°rio: ${tempDir}`)
      await fsExtra.remove(tempDir)
      console.log(`‚úÖ Diret√≥rio tempor√°rio limpo`)
    }
  } catch (error) {
    console.error(`‚ö†Ô∏è  Erro ao limpar diret√≥rio tempor√°rio: ${error.message}`)
  }
}

// Fun√ß√£o para extrair KMZ com tratamento de erro melhorado
async function extractKMZSafely(kmzFilePath, tempDir) {
  try {
    console.log("üì¶ Extraindo arquivo KMZ...")

    // Verificar espa√ßo em disco
    const fileSize = await getFileSize(kmzFilePath)
    const freeSpace = await checkDiskSpace(path.dirname(tempDir))

    if (freeSpace && fileSize > 0) {
      // Estimar espa√ßo necess√°rio (arquivo descompactado pode ser 3-5x maior)
      const estimatedSpace = fileSize * 5
      if (freeSpace < estimatedSpace) {
        const neededGB = (estimatedSpace / (1024 * 1024 * 1024)).toFixed(2)
        const freeGB = (freeSpace / (1024 * 1024 * 1024)).toFixed(2)

        console.log(`‚ùå ERRO: Espa√ßo insuficiente no disco!`)
        console.log(`   Espa√ßo necess√°rio (estimado): ${neededGB} GB`)
        console.log(`   Espa√ßo dispon√≠vel: ${freeGB} GB`)
        console.log(`   Diferen√ßa: ${(neededGB - freeGB).toFixed(2)} GB`)
        console.log(``)
        console.log(`üí° SOLU√á√ïES:`)
        console.log(`   1. Libere espa√ßo no disco removendo arquivos desnecess√°rios`)
        console.log(`   2. Use um disco com mais espa√ßo dispon√≠vel`)
        console.log(`   3. Mova o arquivo KMZ para outro local com mais espa√ßo`)
        console.log(`   4. Use a op√ß√£o de extra√ß√£o parcial (apenas KML)`)

        throw new Error(`Espa√ßo insuficiente no disco. Necess√°rio: ${neededGB} GB, Dispon√≠vel: ${freeGB} GB`)
      }
    }

    // Tentar extra√ß√£o normal
    const zip = new AdmZip(kmzFilePath)
    zip.extractAllTo(tempDir, true)

    console.log(`‚úÖ Extra√ß√£o conclu√≠da com sucesso`)
    return true
  } catch (error) {
    if (error.code === "ENOSPC") {
      console.log(`‚ùå ERRO: Sem espa√ßo no disco durante a extra√ß√£o`)
      console.log(``)
      console.log(`üí° SOLU√á√ïES IMEDIATAS:`)
      console.log(`   1. Limpar diret√≥rio tempor√°rio e tentar novamente`)
      console.log(`   2. Usar modo de extra√ß√£o apenas do KML (mais r√°pido)`)
      console.log(`   3. Mover para disco com mais espa√ßo`)

      // Limpar o que foi extra√≠do parcialmente
      await cleanTempDirectory(tempDir)

      // Tentar extra√ß√£o apenas do KML
      console.log(`üîÑ Tentando extra√ß√£o apenas do arquivo KML...`)
      return await extractOnlyKML(kmzFilePath, tempDir)
    }

    throw error
  }
}

// Fun√ß√£o para extrair apenas o arquivo KML (economia de espa√ßo)
async function extractOnlyKML(kmzFilePath, tempDir) {
  try {
    console.log(`üìÑ Extraindo apenas arquivo KML para economizar espa√ßo...`)

    const zip = new AdmZip(kmzFilePath)
    const entries = zip.getEntries()

    // Criar diret√≥rio se n√£o existir
    if (!existsSync(tempDir)) {
      await fs.mkdir(tempDir, { recursive: true })
    }

    // Extrair apenas arquivos KML
    let kmlFound = false
    for (const entry of entries) {
      if (entry.entryName.toLowerCase().includes(".kml")) {
        console.log(`  Extraindo: ${entry.entryName}`)
        zip.extractEntryTo(entry, tempDir, false, true)
        kmlFound = true
      }
    }

    if (!kmlFound) {
      throw new Error("Nenhum arquivo KML encontrado no KMZ")
    }

    console.log(`‚úÖ Extra√ß√£o do KML conclu√≠da (modo economia de espa√ßo)`)
    console.log(`‚ö†Ô∏è  AVISO: Imagens n√£o foram extra√≠das para economizar espa√ßo`)
    console.log(`   Apenas a classifica√ß√£o por cores ser√° realizada`)

    return true
  } catch (error) {
    console.error(`‚ùå Erro na extra√ß√£o do KML: ${error.message}`)
    return false
  }
}

// Defini√ß√£o das cores e suas classifica√ß√µes
const COLOR_RULES = {
  ff00b371: { type: "salvar", description: "Verde-Padr√£o" },
  ff3643f4: { type: "regularizar", description: "Laranja-escuro" },
  ff631ee9: { type: "regularizar", description: "Rosa-escuro" },
}

// Fun√ß√£o para encontrar arquivos recursivamente
async function findFiles(directory, fileName) {
  const files = await fs.readdir(directory, { withFileTypes: true })
  const results = []

  for (const file of files) {
    const fullPath = path.join(directory, file.name)

    if (file.isDirectory()) {
      const subResults = await findFiles(fullPath, fileName)
      results.push(...subResults)
    } else if (file.name === fileName) {
      results.push(fullPath)
    }
  }

  return results
}

// Fun√ß√£o para encontrar pastas recursivamente
async function findFolders(directory) {
  const items = await fs.readdir(directory, { withFileTypes: true })
  let folders = []

  for (const item of items) {
    const fullPath = path.join(directory, item.name)

    if (item.isDirectory()) {
      folders.push(fullPath)
      const subFolders = await findFolders(fullPath)
      folders = folders.concat(subFolders)
    }
  }

  return folders
}

// Fun√ß√£o para extrair cor do placemark
function extractPlacemarkColor(placemark) {
  // Procurar por elementos de estilo
  const styleElements = placemark.getElementsByTagName("Style")

  for (let i = 0; i < styleElements.length; i++) {
    const style = styleElements[i]

    // Procurar por IconStyle
    const iconStyles = style.getElementsByTagName("IconStyle")
    for (let j = 0; j < iconStyles.length; j++) {
      const iconStyle = iconStyles[j]
      const colorElements = iconStyle.getElementsByTagName("color")

      if (colorElements.length > 0) {
        const color = colorElements[0].textContent.trim().toLowerCase()
        console.log(`    Cor encontrada no IconStyle: ${color}`)
        return color
      }
    }

    // Procurar por LineStyle
    const lineStyles = style.getElementsByTagName("LineStyle")
    for (let j = 0; j < lineStyles.length; j++) {
      const lineStyle = lineStyles[j]
      const colorElements = lineStyle.getElementsByTagName("color")

      if (colorElements.length > 0) {
        const color = colorElements[0].textContent.trim().toLowerCase()
        console.log(`    Cor encontrada no LineStyle: ${color}`)
        return color
      }
    }

    // Procurar por PolyStyle
    const polyStyles = style.getElementsByTagName("PolyStyle")
    for (let j = 0; j < polyStyles.length; j++) {
      const polyStyle = polyStyles[j]
      const colorElements = polyStyle.getElementsByTagName("color")

      if (colorElements.length > 0) {
        const color = colorElements[0].textContent.trim().toLowerCase()
        console.log(`    Cor encontrada no PolyStyle: ${color}`)
        return color
      }
    }
  }

  // Procurar por refer√™ncia de estilo
  const styleUrlElements = placemark.getElementsByTagName("styleUrl")
  if (styleUrlElements.length > 0) {
    const styleUrl = styleUrlElements[0].textContent.trim()
    console.log(`    StyleUrl encontrado: ${styleUrl}`)

    // Procurar o estilo referenciado no documento
    const xmlDoc = placemark.ownerDocument
    const styles = xmlDoc.getElementsByTagName("Style")

    for (let i = 0; i < styles.length; i++) {
      const style = styles[i]
      const styleId = style.getAttribute("id")

      if (styleUrl === `#${styleId}`) {
        console.log(`    Estilo referenciado encontrado: ${styleId}`)

        // Procurar cor no estilo referenciado
        const iconStyles = style.getElementsByTagName("IconStyle")
        for (let j = 0; j < iconStyles.length; j++) {
          const iconStyle = iconStyles[j]
          const colorElements = iconStyle.getElementsByTagName("color")

          if (colorElements.length > 0) {
            const color = colorElements[0].textContent.trim().toLowerCase()
            console.log(`    Cor encontrada no estilo referenciado: ${color}`)
            return color
          }
        }
      }
    }
  }

  return null
}

// Fun√ß√£o para classificar placemark baseado na cor
function classifyPlacemark(color) {
  if (!color) {
    return { type: "desconhecido", description: "Cor n√£o identificada" }
  }

  const rule = COLOR_RULES[color.toLowerCase()]
  if (rule) {
    return rule
  }

  return { type: "desconhecido", description: `Cor n√£o mapeada: ${color}` }
}

// Fun√ß√£o principal
async function processKMZ(kmzFilePath) {
  console.log(`Processando arquivo KMZ: ${kmzFilePath}`)

  try {
    const kmzBaseName = path.basename(kmzFilePath, path.extname(kmzFilePath))
    const tempDir = path.join(path.dirname(kmzFilePath), `extracted_${kmzBaseName}`)

    // Arquivos de sa√≠da para classifica√ß√£o por cores
    const salvarOutputFile = path.join(path.dirname(kmzFilePath), "Codigos-salvos-regularizado.txt")
    const regularizarOutputFile = path.join(path.dirname(kmzFilePath), "pedente-pra-regularizar.txt")
    const desconhecidoOutputFile = path.join(path.dirname(kmzFilePath), `${kmzBaseName}_cores-desconhecidas.txt`)

    console.log(`Diret√≥rio de extra√ß√£o: ${tempDir}`)
    console.log(`C√≥digos para salvar ser√£o salvos em: ${salvarOutputFile}`)
    console.log(`C√≥digos para regularizar ser√£o salvos em: ${regularizarOutputFile}`)
    console.log(`C√≥digos com cores desconhecidas ser√£o salvos em: ${desconhecidoOutputFile}`)

    if (!existsSync(tempDir)) {
      await fs.mkdir(tempDir, { recursive: true })
      console.log(`Diret√≥rio de extra√ß√£o criado: ${tempDir}`)
    } else {
      console.log(`Diret√≥rio de extra√ß√£o j√° existe, usando conte√∫do existente se aplic√°vel`)
    }

    // Extrair o arquivo KMZ
    console.log("Extraindo arquivo KMZ...")
    // zip.extractAllTo(tempDir, true)
    const extractionSuccess = await extractKMZSafely(kmzFilePath, tempDir)
    if (!extractionSuccess) {
      throw new Error("Falha na extra√ß√£o do arquivo KMZ")
    }

    // Buscar arquivos KML recursivamente
    console.log("Buscando arquivo KML...")
    const kmlFiles = await findFiles(tempDir, "doc.kml")

    if (kmlFiles.length === 0) {
      throw new Error("Arquivo doc.kml n√£o encontrado na extra√ß√£o")
    }

    const kmlPath = kmlFiles[0]
    console.log(`Arquivo KML encontrado em: ${kmlPath}`)

    // Localizar a pasta cloud_media recursivamente
    console.log("Buscando pasta cloud_media...")
    let cloudMediaPath = null

    const defaultCloudMediaPath = path.join(path.dirname(kmlPath), "cloud_media")
    if (existsSync(defaultCloudMediaPath)) {
      cloudMediaPath = defaultCloudMediaPath
    } else {
      const folders = await findFolders(tempDir)
      const cloudMediaFolders = folders.filter((folder) => path.basename(folder) === "cloud_media")

      if (cloudMediaFolders.length > 0) {
        cloudMediaPath = cloudMediaFolders[0]
      }
    }

    if (!cloudMediaPath) {
      throw new Error("Pasta cloud_media n√£o encontrada na extra√ß√£o")
    }

    console.log(`Pasta cloud_media encontrada em: ${cloudMediaPath}`)

    // Ler e analisar o arquivo KML
    console.log("Analisando arquivo KML...")
    const kmlContent = await fs.readFile(kmlPath, "utf8")
    const parser = new DOMParser()
    const xmlDoc = parser.parseFromString(kmlContent, "text/xml")

    // Extrair informa√ß√µes dos Placemarks
    const placemarks = xmlDoc.getElementsByTagName("Placemark")
    console.log(`Encontrados ${placemarks.length} placemarks no arquivo KML`)

    // Arrays para armazenar os c√≥digos classificados
    const codigosSalvar = []
    const codigosRegularizar = []
    const codigosDesconhecidos = []

    // Mapear imagens para renomear
    const imageMap = new Map()
    let processedPlacemarks = 0
    let skippedPlacemarks = 0

    for (let i = 0; i < placemarks.length; i++) {
      const placemark = placemarks[i]

      const placemarkId = placemark.getAttribute("id")

      let nameElements = placemark.getElementsByTagName("name")
      if (nameElements.length === 0) {
        nameElements = placemark.getElementsByTagName("n")
      }

      if (nameElements.length === 0) {
        console.log(`Placemark #${i} (ID: ${placemarkId || "n√£o definido"}) n√£o possui elemento name/n, pulando...`)
        skippedPlacemarks++
        continue
      }

      const placemarkName = nameElements[0].textContent.trim()
      console.log(`\nProcessando Placemark #${i} (ID: ${placemarkId || "n√£o definido"}, Nome: ${placemarkName})`)

      // Extrair cor do placemark
      console.log(`  Extraindo cor do placemark...`)
      const color = extractPlacemarkColor(placemark)

      // Classificar o placemark baseado na cor
      const classification = classifyPlacemark(color)
      console.log(`  Classifica√ß√£o: ${classification.type} (${classification.description})`)

      // Adicionar aos arrays apropriados
      const placemarkEntry = `${placemarkName} |`

      switch (classification.type) {
        case "salvar":
          codigosSalvar.push(placemarkEntry)
          console.log(`  ‚úì Adicionado aos c√≥digos para salvar`)
          break
        case "regularizar":
          codigosRegularizar.push(placemarkEntry)
          console.log(`  ‚ö† Adicionado aos c√≥digos para regularizar`)
          break
        default:
          codigosDesconhecidos.push(`${placemarkEntry} (Cor: ${color || "n√£o encontrada"})`)
          console.log(`  ? Adicionado aos c√≥digos com cor desconhecida`)
          break
      }

      // Continuar com o processamento de imagens (c√≥digo original)
      let descriptionContent = ""
      const descElements = placemark.getElementsByTagName("description")

      if (descElements.length > 0) {
        descriptionContent = descElements[0].textContent
        console.log(`  Encontrado elemento description com ${descriptionContent.length} caracteres`)
      } else {
        console.log(`  Elemento description n√£o encontrado no Placemark ${placemarkName}`)
        skippedPlacemarks++
        continue
      }

      let description = ""
      const preMatch =
        descriptionContent.match(/<pre.*?>(.*?)<\/pre>/s) ||
        descriptionContent.match(/pre id="com\.exlyo\.mapmarker\.description_p_tag">(.*?)<\/pre>/s)

      if (preMatch && preMatch[1]) {
        description = preMatch[1].trim()
        console.log(`  Descri√ß√£o extra√≠da: "${description}"`)
      } else {
        console.log(`  N√£o foi poss√≠vel extrair a descri√ß√£o do pr√©-tag para ${placemarkName}`)
        description = placemarkName
      }

      let imgMatches = [...descriptionContent.matchAll(/src="cloud_media\/(.*?)"/g)]

      if (imgMatches.length === 0) {
        imgMatches = [...descriptionContent.matchAll(/src="(.*?)"/g)]
      }

      if (imgMatches.length === 0) {
        console.log(`  Nenhuma refer√™ncia de imagem encontrada para ${placemarkName}`)
        console.log(`  Buscando imagens na pasta cloud_media diretamente...`)

        try {
          const cloudMediaFiles = await fs.readdir(cloudMediaPath)
          const imageFiles = cloudMediaFiles.filter((file) => {
            const ext = path.extname(file).toLowerCase()
            return [".jpg", ".jpeg", ".png", ".gif", ".bmp", ".webp"].includes(ext)
          })

          if (imageFiles.length > 0) {
            imgMatches = imageFiles.map((file) => [null, file])
            console.log(`  Encontradas ${imgMatches.length} imagens na pasta cloud_media`)
          } else {
            console.log(`  Nenhuma imagem encontrada na pasta cloud_media`)
            processedPlacemarks++
            continue
          }
        } catch (error) {
          console.error(`  Erro ao listar arquivos em cloud_media: ${error.message}`)
          skippedPlacemarks++
          continue
        }
      }

      console.log(`  Encontradas ${imgMatches.length} refer√™ncias de imagem`)
      let imageCount = 0

      const cleanPlacemarkName = removeXIcon(placemarkName)
      const cleanDescription = removeXIcon(description)

      for (const match of imgMatches) {
        const imagePath = match[1]
        console.log(`  Processando imagem: ${imagePath}`)

        let newName = `${cleanPlacemarkName} ${cleanDescription}`.trim()

        if (imageCount > 0) {
          newName += ".."
        }

        newName += ".jpg"
        newName = sanitizeFileName(newName)

        imageMap.set(imagePath, newName)
        console.log(`  Mapeado: ${imagePath} -> ${newName}`)
        imageCount++
      }

      processedPlacemarks++
    }

    console.log(`\nResumo do processamento:`)
    console.log(`- Total de Placemarks: ${placemarks.length}`)
    console.log(`- Placemarks processados: ${processedPlacemarks}`)
    console.log(`- Placemarks ignorados: ${skippedPlacemarks}`)
    console.log(`- C√≥digos para salvar: ${codigosSalvar.length}`)
    console.log(`- C√≥digos para regularizar: ${codigosRegularizar.length}`)
    console.log(`- C√≥digos com cor desconhecida: ${codigosDesconhecidos.length}`)
    console.log(`- Imagens para renomear: ${imageMap.size}`)

    // Salvar os c√≥digos classificados em arquivos separados
    console.log(`\nSalvando c√≥digos classificados...`)

    // Salvar c√≥digos para salvar
    if (codigosSalvar.length > 0) {
      try {
        const content = codigosSalvar.join("\n")
        await fs.writeFile(salvarOutputFile, content)
        console.log(`‚úì ${codigosSalvar.length} c√≥digos salvos em: ${salvarOutputFile}`)
      } catch (error) {
        console.error(`‚úó Erro ao salvar c√≥digos para salvar: ${error.message}`)
      }
    }

    // Salvar c√≥digos para regularizar
    if (codigosRegularizar.length > 0) {
      try {
        const content = codigosRegularizar.join("\n")
        await fs.writeFile(regularizarOutputFile, content)
        console.log(`‚úì ${codigosRegularizar.length} c√≥digos salvos em: ${regularizarOutputFile}`)
      } catch (error) {
        console.error(`‚úó Erro ao salvar c√≥digos para regularizar: ${error.message}`)
      }
    }

    // Salvar c√≥digos com cor desconhecida
    if (codigosDesconhecidos.length > 0) {
      try {
        const content = codigosDesconhecidos.join("\n")
        await fs.writeFile(desconhecidoOutputFile, content)
        console.log(
          `‚úì ${codigosDesconhecidos.length} c√≥digos com cor desconhecida salvos em: ${desconhecidoOutputFile}`,
        )
      } catch (error) {
        console.error(`‚úó Erro ao salvar c√≥digos com cor desconhecida: ${error.message}`)
      }
    }

    // Renomear os arquivos (c√≥digo original)
    console.log(`\nRenomeando ${imageMap.size} arquivos de imagem...`)

    let renamedCount = 0
    let errorCount = 0

    for (const [originalName, newName] of imageMap.entries()) {
      const originalPath = path.join(cloudMediaPath, originalName)
      const newPath = path.join(cloudMediaPath, newName)

      try {
        if (existsSync(originalPath)) {
          if (existsSync(newPath)) {
            console.log(`‚ö† Arquivo j√° existe com o nome: ${newName}, ignorando...`)
            renamedCount++
          } else {
            await fs.rename(originalPath, newPath)
            console.log(`‚úì Renomeado: ${originalName} -> ${newName}`)
            renamedCount++
          }
        } else {
          console.warn(`‚ö† Arquivo n√£o encontrado: ${originalPath}`)
          errorCount++
        }
      } catch (error) {
        console.error(`‚úó Erro ao renomear ${originalName}: ${error.message}`)
        errorCount++
      }
    }

    // Verificar e converter imagens n√£o-JPG para JPG
    console.log("\nVerificando formatos de imagem na pasta cloud_media...")
    await convertNonJpgImages(cloudMediaPath)

    console.log("\n" + "=".repeat(60))
    console.log("PROCESSAMENTO CONCLU√çDO!")
    console.log("=".repeat(60))
    console.log(`üìä ESTAT√çSTICAS FINAIS:`)
    console.log(`   ‚Ä¢ Placemarks processados: ${processedPlacemarks}`)
    console.log(`   ‚Ä¢ Arquivos renomeados: ${renamedCount}`)
    console.log(`   ‚Ä¢ Erros de renomea√ß√£o: ${errorCount}`)
    console.log(``)
    console.log(`üìã CLASSIFICA√á√ÉO POR CORES:`)
    console.log(`   ‚úÖ C√≥digos para salvar: ${codigosSalvar.length}`)
    console.log(`   ‚ö†Ô∏è  C√≥digos para regularizar: ${codigosRegularizar.length}`)
    console.log(`   ‚ùì C√≥digos com cor desconhecida: ${codigosDesconhecidos.length}`)
    console.log(``)
    console.log(`üìÅ ARQUIVOS GERADOS:`)
    if (codigosSalvar.length > 0) console.log(`   ‚Ä¢ ${salvarOutputFile}`)
    if (codigosRegularizar.length > 0) console.log(`   ‚Ä¢ ${regularizarOutputFile}`)
    if (codigosDesconhecidos.length > 0) console.log(`   ‚Ä¢ ${desconhecidoOutputFile}`)
    console.log("=".repeat(60))
  } catch (error) {
    console.error("Erro ao processar o arquivo KMZ:", error)
  }
}

// Fun√ß√£o para verificar e converter imagens n√£o-JPG para JPG (c√≥digo original mantido)
async function convertNonJpgImages(directoryPath) {
  try {
    const files = await fs.readdir(directoryPath)
    console.log(`Encontrados ${files.length} arquivos na pasta cloud_media`)

    let convertedCount = 0
    let alreadyJpgCount = 0
    let errorCount = 0
    let nonImageCount = 0

    const imageExtensions = new Set([
      ".png",
      ".gif",
      ".bmp",
      ".webp",
      ".tiff",
      ".tif",
      ".svg",
      ".heic",
      ".heif",
      ".avif",
    ])

    for (const file of files) {
      const filePath = path.join(directoryPath, file)
      const fileExt = path.extname(file).toLowerCase()

      const stats = await fs.stat(filePath)
      if (stats.isDirectory()) {
        console.log(`Ignorando diret√≥rio: ${file}`)
        continue
      }

      if (fileExt === ".jpg" || fileExt === ".jpeg") {
        console.log(`‚úì Arquivo j√° est√° em formato JPG: ${file}`)

        if (fileExt !== ".jpg") {
          try {
            const baseName = path.basename(file, fileExt)
            const newFileName = baseName + ".jpg"
            const newFilePath = path.join(directoryPath, newFileName)

            await fs.rename(filePath, newFilePath)
            console.log(`‚úì Extens√£o normalizada: ${file} -> ${newFileName}`)
          } catch (error) {
            console.error(`‚úó Erro ao normalizar extens√£o de ${file}: ${error.message}`)
          }
        }

        alreadyJpgCount++
        continue
      }

      if (imageExtensions.has(fileExt)) {
        console.log(`Convertendo ${file} para JPG...`)

        try {
          const outputFileName = path.basename(file, fileExt) + ".jpg"
          const outputPath = path.join(directoryPath, outputFileName)

          if (existsSync(outputPath)) {
            console.log(`‚ö† Arquivo j√° existe: ${outputFileName}, ignorando convers√£o...`)
            convertedCount++
          } else {
            const imageBuffer = await fs.readFile(filePath)

            await sharp(imageBuffer, { failOnError: false }).jpeg({ quality: 90 }).toFile(outputPath)

            await fs.unlink(filePath)

            console.log(`‚úì Convertido: ${file} -> ${outputFileName}`)
            convertedCount++
          }
        } catch (error) {
          console.error(`‚úó Erro ao converter ${file}: ${error.message}`)
          errorCount++

          if (fileExt === ".bmp") {
            try {
              console.log(`  Tentando m√©todo alternativo para BMP...`)
              const imageBuffer = await fsExtra.readFile(filePath)

              const outputFileName = path.basename(file, fileExt) + ".jpg"
              const outputPath = path.join(directoryPath, outputFileName)

              if (existsSync(outputPath)) {
                console.log(`‚ö† Arquivo j√° existe: ${outputFileName}, ignorando convers√£o alternativa...`)
                convertedCount++
                errorCount--
              } else {
                await sharp(imageBuffer, {
                  failOnError: false,
                  density: 300,
                })
                  .flatten()
                  .jpeg({ quality: 90 })
                  .toFile(outputPath)

                await fs.unlink(filePath)

                console.log(`‚úì Convertido com m√©todo alternativo: ${file} -> ${outputFileName}`)
                convertedCount++
                errorCount--
              }
            } catch (altError) {
              console.error(`‚úó Erro no m√©todo alternativo para ${file}: ${altError.message}`)
            }
          }
        }
      } else {
        try {
          const imageBuffer = await fs.readFile(filePath)

          await sharp(imageBuffer, { failOnError: false }).metadata()

          console.log(`Detectado arquivo de imagem sem extens√£o adequada: ${file}`)

          const outputFileName = path.basename(file, fileExt) + ".jpg"
          const outputPath = path.join(directoryPath, outputFileName)

          if (existsSync(outputPath)) {
            console.log(`‚ö† Arquivo j√° existe: ${outputFileName}, ignorando convers√£o...`)
            convertedCount++
          } else {
            await sharp(imageBuffer, { failOnError: false }).jpeg({ quality: 90 }).toFile(outputPath)

            await fs.unlink(filePath)

            console.log(`‚úì Convertido: ${file} -> ${outputFileName}`)
            convertedCount++
          }
        } catch (error) {
          console.log(`Arquivo ignorado (n√£o √© uma imagem ou n√£o pode ser processado): ${file}`)
          nonImageCount++
        }
      }
    }

    console.log("\nResumo da convers√£o de imagens:")
    console.log(`- Total de arquivos verificados: ${files.length}`)
    console.log(`- Arquivos j√° em formato JPG: ${alreadyJpgCount}`)
    console.log(`- Arquivos convertidos para JPG: ${convertedCount}`)
    console.log(`- Arquivos n√£o-imagem ignorados: ${nonImageCount}`)
    console.log(`- Erros de convers√£o: ${errorCount}`)
  } catch (error) {
    console.error("Erro ao verificar e converter imagens:", error)
  }
}

// Fun√ß√£o para remover o √≠cone ‚ùå do texto (c√≥digo original mantido)
function removeXIcon(text) {
  if (!text) return ""

  const cleaned = text.replace(/\s*‚ùå\s*/g, " ").trim()

  if (text !== cleaned) {
    console.log(`  Removido √≠cone ‚ùå de: "${text}" -> "${cleaned}"`)
  }

  return cleaned
}

// Fun√ß√£o para sanitizar nomes de arquivo (c√≥digo original mantido)
function sanitizeFileName(fileName) {
  return fileName
    .replace(/[/\\:*?"<>|]/g, "_")
    .replace(/\s+/g, " ")
    .trim()
}

// Fun√ß√£o para executar o programa
async function main() {
  const args = process.argv.slice(2)

  if (args.length === 0) {
    console.log("Uso: node kmz-extractor-with-colors.js caminho/para/arquivo.kmz")
    console.log("")
    console.log("Este script classifica placemarks baseado nas cores:")
    console.log("‚Ä¢ Verde-Padr√£o (ff00b371): pode salvar -> Codigos-salvos-regularizado.txt")
    console.log("‚Ä¢ Laranja-escuro (ff3643f4): tem que regularizar -> pedente-pra-regularizar.txt")
    console.log("‚Ä¢ Rosa-escuro (ff631ee9): tem que regularizar -> pedente-pra-regularizar.txt")
    return
  }

  const kmzFilePath = args[0]

  if (!existsSync(kmzFilePath)) {
    console.error(`Arquivo n√£o encontrado: ${kmzFilePath}`)
    return
  }

  await processKMZ(kmzFilePath)
}

// Executar o programa
main().catch(console.error)
